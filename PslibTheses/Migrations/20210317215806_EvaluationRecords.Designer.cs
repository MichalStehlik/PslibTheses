// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PslibTheses.Data;

namespace PslibTheses.Migrations
{
    [DbContext(typeof(ThesesContext))]
    [Migration("20210317215806_EvaluationRecords")]
    partial class EvaluationRecords
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PslibTheses.Model.Idea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Participants")
                        .HasColumnType("int");

                    b.Property<string>("Resources")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Ideas");
                });

            modelBuilder.Entity("PslibTheses.Model.IdeaGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdeaId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId", "Order")
                        .IsUnique();

                    b.ToTable("IdeaGoals");
                });

            modelBuilder.Entity("PslibTheses.Model.IdeaOffer", b =>
                {
                    b.Property<int>("IdeaId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdeaId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("IdeaOffers");
                });

            modelBuilder.Entity("PslibTheses.Model.IdeaOutline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdeaId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId", "Order")
                        .IsUnique();

                    b.ToTable("IdeaOutlines");
                });

            modelBuilder.Entity("PslibTheses.Model.IdeaTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdeaId")
                        .HasColumnType("int");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TargetId");

                    b.HasIndex("IdeaId", "TargetId")
                        .IsUnique();

                    b.ToTable("IdeaTargets");
                });

            modelBuilder.Entity("PslibTheses.Model.Scale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Scales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Stará škála"
                        });
                });

            modelBuilder.Entity("PslibTheses.Model.ScaleValue", b =>
                {
                    b.Property<int>("ScaleId")
                        .HasColumnType("int");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<double>("Mark")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScaleId", "Rate");

                    b.ToTable("ScaleValues");

                    b.HasData(
                        new
                        {
                            ScaleId = 1,
                            Rate = 1.0,
                            Mark = 1.0,
                            Name = "Výborný"
                        },
                        new
                        {
                            ScaleId = 1,
                            Rate = 0.80000000000000004,
                            Mark = 2.0,
                            Name = "Chvalitebný"
                        },
                        new
                        {
                            ScaleId = 1,
                            Rate = 0.59999999999999998,
                            Mark = 3.0,
                            Name = "Dobrý"
                        },
                        new
                        {
                            ScaleId = 1,
                            Rate = 0.40000000000000002,
                            Mark = 4.0,
                            Name = "Dostatečný"
                        },
                        new
                        {
                            ScaleId = 1,
                            Rate = 0.20000000000000001,
                            Mark = 5.0,
                            Name = "Nedostatečný"
                        });
                });

            modelBuilder.Entity("PslibTheses.Model.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredGoals")
                        .HasColumnType("int");

                    b.Property<int>("RequiredOutlines")
                        .HasColumnType("int");

                    b.Property<int>("ScaleId")
                        .HasColumnType("int");

                    b.Property<int>("Template")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScaleId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("PslibTheses.Model.SetAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Critical")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("SetQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SetQuestionId");

                    b.ToTable("SetAnswers");
                });

            modelBuilder.Entity("PslibTheses.Model.SetQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("SetRoleId")
                        .HasColumnType("int");

                    b.Property<int>("SetTermId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SetRoleId");

                    b.HasIndex("SetTermId");

                    b.ToTable("SetQuestions");
                });

            modelBuilder.Entity("PslibTheses.Model.SetRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ClassTeacher")
                        .HasColumnType("bit");

                    b.Property<bool>("Manager")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PrintedInApplication")
                        .HasColumnType("bit");

                    b.Property<bool>("PrintedInReview")
                        .HasColumnType("bit");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SetId");

                    b.ToTable("SetRoles");
                });

            modelBuilder.Entity("PslibTheses.Model.SetTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WarningDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("SetId");

                    b.ToTable("SetTerms");
                });

            modelBuilder.Entity("PslibTheses.Model.Target", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RGB")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Targets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RGB = -256,
                            Text = "MP Lyceum"
                        },
                        new
                        {
                            Id = 2,
                            RGB = -23296,
                            Text = "RP Lyceum"
                        },
                        new
                        {
                            Id = 3,
                            RGB = -65536,
                            Text = "MP IT"
                        },
                        new
                        {
                            Id = 4,
                            RGB = -16776961,
                            Text = "MP Strojírenství"
                        },
                        new
                        {
                            Id = 5,
                            RGB = -16744448,
                            Text = "MP Elektrotechnika"
                        });
                });

            modelBuilder.Entity("PslibTheses.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanBeAuthor")
                        .HasColumnType("bit");

                    b.Property<bool>("CanBeEvaluator")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("IconImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("IconImageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockedChange")
                        .HasColumnType("bit");

                    b.Property<bool>("LockedIcon")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PslibTheses.Model.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailExpenditures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaterialCosts")
                        .HasColumnType("int");

                    b.Property<int>("MaterialCostsProvidedBySchool")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepositoryURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resources")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ServicesCosts")
                        .HasColumnType("int");

                    b.Property<int>("ServicesCostsProvidedBySchool")
                        .HasColumnType("int");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SetId");

                    b.HasIndex("UserId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkEvaluation", b =>
                {
                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.Property<int>("SetQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SetAnswerId")
                        .HasColumnType("int");

                    b.HasKey("WorkId", "SetQuestionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SetAnswerId");

                    b.HasIndex("SetQuestionId");

                    b.ToTable("WorkEvaluation");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkId");

                    b.ToTable("WorkGoals");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WorkId");

                    b.ToTable("WorkNote");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkOutline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkId");

                    b.ToTable("WorkOutlines");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Finalized")
                        .HasColumnType("bit");

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SetRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SetRoleId");

                    b.HasIndex("WorkId");

                    b.ToTable("WorkRoles");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkRoleQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WorkRoleId");

                    b.ToTable("WorkRoleQuestions");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkRoleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkRoleId");

                    b.ToTable("WorkRoleUsers");
                });

            modelBuilder.Entity("PslibTheses.Model.Idea", b =>
                {
                    b.HasOne("PslibTheses.Model.User", "User")
                        .WithMany("OwnedIdeas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PslibTheses.Model.User", null)
                        .WithMany("IdeaOffers")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PslibTheses.Model.IdeaGoal", b =>
                {
                    b.HasOne("PslibTheses.Model.Idea", "Idea")
                        .WithMany("Goals")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idea");
                });

            modelBuilder.Entity("PslibTheses.Model.IdeaOffer", b =>
                {
                    b.HasOne("PslibTheses.Model.Idea", "Idea")
                        .WithMany("IdeaOffers")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PslibTheses.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idea");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PslibTheses.Model.IdeaOutline", b =>
                {
                    b.HasOne("PslibTheses.Model.Idea", "Idea")
                        .WithMany("Outlines")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idea");
                });

            modelBuilder.Entity("PslibTheses.Model.IdeaTarget", b =>
                {
                    b.HasOne("PslibTheses.Model.Idea", "Idea")
                        .WithMany("IdeaTargets")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PslibTheses.Model.Target", "Target")
                        .WithMany("Ideas")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idea");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("PslibTheses.Model.ScaleValue", b =>
                {
                    b.HasOne("PslibTheses.Model.Scale", "Scale")
                        .WithMany("ScaleValues")
                        .HasForeignKey("ScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scale");
                });

            modelBuilder.Entity("PslibTheses.Model.Set", b =>
                {
                    b.HasOne("PslibTheses.Model.Scale", "Scale")
                        .WithMany("Sets")
                        .HasForeignKey("ScaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Scale");
                });

            modelBuilder.Entity("PslibTheses.Model.SetAnswer", b =>
                {
                    b.HasOne("PslibTheses.Model.SetQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("SetQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PslibTheses.Model.SetQuestion", b =>
                {
                    b.HasOne("PslibTheses.Model.SetRole", "Role")
                        .WithMany("Questions")
                        .HasForeignKey("SetRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PslibTheses.Model.SetTerm", "Term")
                        .WithMany("Questions")
                        .HasForeignKey("SetTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("PslibTheses.Model.SetRole", b =>
                {
                    b.HasOne("PslibTheses.Model.Set", "Set")
                        .WithMany("Roles")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Set");
                });

            modelBuilder.Entity("PslibTheses.Model.SetTerm", b =>
                {
                    b.HasOne("PslibTheses.Model.Set", "Set")
                        .WithMany("Terms")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Set");
                });

            modelBuilder.Entity("PslibTheses.Model.Work", b =>
                {
                    b.HasOne("PslibTheses.Model.User", "Author")
                        .WithMany("AuthoredWorks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PslibTheses.Model.User", "Manager")
                        .WithMany("ManagedWorks")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PslibTheses.Model.Set", "Set")
                        .WithMany("Works")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PslibTheses.Model.User", "User")
                        .WithMany("OwnedWorks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Manager");

                    b.Navigation("Set");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkEvaluation", b =>
                {
                    b.HasOne("PslibTheses.Model.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PslibTheses.Model.SetAnswer", "SetAnswer")
                        .WithMany()
                        .HasForeignKey("SetAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PslibTheses.Model.SetQuestion", "SetQuestion")
                        .WithMany()
                        .HasForeignKey("SetQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PslibTheses.Model.Work", "Work")
                        .WithMany("EvaluationAnswers")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("SetAnswer");

                    b.Navigation("SetQuestion");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkGoal", b =>
                {
                    b.HasOne("PslibTheses.Model.Work", "Work")
                        .WithMany("Goals")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkNote", b =>
                {
                    b.HasOne("PslibTheses.Model.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PslibTheses.Model.Work", "Work")
                        .WithMany("Notes")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkOutline", b =>
                {
                    b.HasOne("PslibTheses.Model.Work", "Work")
                        .WithMany("Outlines")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkRole", b =>
                {
                    b.HasOne("PslibTheses.Model.SetRole", "SetRole")
                        .WithMany("WorkRoles")
                        .HasForeignKey("SetRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PslibTheses.Model.Work", "Work")
                        .WithMany("Roles")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SetRole");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkRoleQuestion", b =>
                {
                    b.HasOne("PslibTheses.Model.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PslibTheses.Model.WorkRole", "WorkRole")
                        .WithMany("WorkRoleQuestions")
                        .HasForeignKey("WorkRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("WorkRole");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkRoleUser", b =>
                {
                    b.HasOne("PslibTheses.Model.User", "User")
                        .WithMany("WorkRoleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PslibTheses.Model.WorkRole", "WorkRole")
                        .WithMany("WorkRoleUsers")
                        .HasForeignKey("WorkRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkRole");
                });

            modelBuilder.Entity("PslibTheses.Model.Idea", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("IdeaOffers");

                    b.Navigation("IdeaTargets");

                    b.Navigation("Outlines");
                });

            modelBuilder.Entity("PslibTheses.Model.Scale", b =>
                {
                    b.Navigation("ScaleValues");

                    b.Navigation("Sets");
                });

            modelBuilder.Entity("PslibTheses.Model.Set", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Terms");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("PslibTheses.Model.SetQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("PslibTheses.Model.SetRole", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("WorkRoles");
                });

            modelBuilder.Entity("PslibTheses.Model.SetTerm", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("PslibTheses.Model.Target", b =>
                {
                    b.Navigation("Ideas");
                });

            modelBuilder.Entity("PslibTheses.Model.User", b =>
                {
                    b.Navigation("AuthoredWorks");

                    b.Navigation("IdeaOffers");

                    b.Navigation("ManagedWorks");

                    b.Navigation("OwnedIdeas");

                    b.Navigation("OwnedWorks");

                    b.Navigation("WorkRoleUsers");
                });

            modelBuilder.Entity("PslibTheses.Model.Work", b =>
                {
                    b.Navigation("EvaluationAnswers");

                    b.Navigation("Goals");

                    b.Navigation("Notes");

                    b.Navigation("Outlines");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("PslibTheses.Model.WorkRole", b =>
                {
                    b.Navigation("WorkRoleQuestions");

                    b.Navigation("WorkRoleUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
